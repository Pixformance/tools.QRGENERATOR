in order for the tool to remember which and how many QR codes were generated,
they must be peristed somwhere. one option might be the database. This has
large management overhead (backup, access rights, infrastructure). Instead,
in order to move forward faster, a simple CSV file will be used. This file
will be CHECKED IN to our GIT repository.

so, in order to generate new QR codes, one has to PULL the latest CSV from
the repository, generate the QR codes, and then COMMIT+PUSH. Simple, can
be made more complicated later.

QR Codes / Pixformance Membership Tags are specified in a document also checked
in to this repository (Procedures.docx)

Tasks:
1.  Read the CSV file

    Goals:
    - find the max qr code number generated
        --  this is simple because those are only numbers, so it's just important
            to find the max int
    - make sure, the same serial number isn't used during the generation.
        --  we weren't sure that the serial numbers are collision free
            then a query each time would be required. this is ok with small
            number of serial numbers, but with a large number of 100k and more
            this might be a difficult and costly procedure.

            In this version we'll avoid it. If we wanted to have work with a query,
            the following approach could be used:
                1.  import the file into the SQL Compact Edition database
                    (SQL CE is a in-process database)
                2.  use the SQL CE database to execute the queries

            In this version we'll do something different: we'll use
            serial numbers that do quarantee that there are no collisions,
            as a result, no check is required so the only information that
            has to be extracted is the maximum qr code used plus the maximum
            page number used (for whole-page activations of codes)

            index,qr_code_value,qr_code_serial_number,page_number,software_version,
            1,1,11,1,1.0.0.0
            2,2,22,1,2.0.0.0
            ...

2.  Generate a batch of QR codes for a page of a PDF file, e.g. 70 codes 
    plus their serial numbers

    during the generation make sure:
    - don't generate the same QR
    - don't generate the same serial number

    keep the results in memory
    - reason: steps should be separate / easier to replace, update

3.  Generate a PDF with the QR codes and serial numbers from memory
    to a temp file, make sure the file was generated (exists)

4.  Update the CSV file with the new QR codes and serial numbers

5.  Move the temp file to the output.










http://www.pvladov.com/2012/05/decimal-to-arbitrary-numeral-system.html
/// <summary>
/// Converts the given decimal number to the numeral system with the
/// specified radix (in the range [2, 36]).
/// </summary>
/// <param name="decimalNumber">The number to convert.</param>
/// <param name="radix">The radix of the destination numeral system
/// (in the range [2, 36]).</param>
/// <returns></returns>
public static string DecimalToArbitrarySystem(long decimalNumber, int radix)
{
    const int BitsInLong = 64;
    const string Digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    if (radix < 2 || radix > Digits.Length)
        throw new ArgumentException("The radix must be >= 2 and <= " +
            Digits.Length.ToString());

    if (decimalNumber == 0)
        return "0";

    int index = BitsInLong - 1;
    long currentNumber = Math.Abs(decimalNumber);
    char[] charArray = new char[BitsInLong];

    while (currentNumber != 0)
    {
        int remainder = (int)(currentNumber % radix);
        charArray[index--] = Digits[remainder];
        currentNumber = currentNumber / radix;
    }

    string result = new String(charArray, index + 1, BitsInLong - index - 1);
    if (decimalNumber < 0)
    {
        result = "-" + result;
    }

    return result;
}

http://www.pvladov.com/2012/07/arbitrary-to-decimal-numeral-system.html

/// <summary>
/// Converts the given number from the numeral system with the specified
/// radix (in the range [2, 36]) to decimal numeral system.
/// </summary>
/// <param name="number">The arbitrary numeral system number to convert.</param>
/// <param name="radix">The radix of the numeral system the given number
/// is in (in the range [2, 36]).</param>
/// <returns></returns>
public static long ArbitraryToDecimalSystem(string number, int radix)
{
    const string Digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    if (radix < 2 || radix > Digits.Length)
        throw new ArgumentException("The radix must be >= 2 and <= " +
            Digits.Length.ToString());

    if (String.IsNullOrEmpty(number))
        return 0;

    // Make sure the arbitrary numeral system number is in upper case
    number = number.ToUpperInvariant();

    long result = 0;
    long multiplier = 1;
    for (int i = number.Length - 1; i >= 0; i--)
    {
        char c = number[i];
        if (i == 0 && c == '-')
        {
            // This is the negative sign symbol
            result = -result;
            break;
        }

        int digit = Digits.IndexOf(c);
        if (digit == -1)
            throw new ArgumentException(
                "Invalid character in the arbitrary numeral system number",
                "number");

        result += digit * multiplier;
        multiplier *= radix;
    }

    return result;
}